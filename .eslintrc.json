{
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": 2020,
    "sourceType": "module",
    // in our case ts parser should use defined configs file
    "project": "./tsconfig.json"
  },
  "env": {
    "node": true,
    "es2020": true
  },
  "settings": {
    // plugin import, parsers functionality
    "import/parsers": {
      // when parsing with @typescript-eslint/parser, it should only process defined exts
      "@typescript-eslint/parser": [".ts", ".tsx"]
    },
    // plugin import, modules resolvers functionality
    "import/resolver": {
      // when using it with typecript
      "typescript": {
        // should try importing types from .d.ts files over .js files (even if no such file in dir)
        "alwaysTryTypes": true,
        // in our case ts resolver should use defined configs file
        "project": "./tsconfig.json"
      }
    }
  },

  // plugins - doing something on side (convert/compute), exposing rules to apply (in extends) and apply/change (in rules) if have some
  "plugins": [
    // a lot of useful typescript specific rules https://github.com/typescript-eslint/typescript-eslint/tree/master/packages/eslint-plugin#supported-rules
    "@typescript-eslint",
    "promise",
    "unicorn",
    "import",
    // converting local prettier config into set of rules https://github.com/prettier/eslint-plugin-prettier#installation
    "prettier"
  ],

  // extends - set of rules from plugin above or eslint-config- <name>
  "extends": [
    // airbnb ts rules
    "airbnb-typescript/base",
    // ts overall recommended rules
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
    // promise recommended rules
    "plugin:promise/recommended",
    // TODO: investigate, another set of useful rules?
    "plugin:unicorn/recommended",
    // disabling all the rules that might conflict with prettier https://github.com/prettier/eslint-config-prettier#installation
    "prettier"
  ],

  // rules - place for overridng rules from plugin/config
  "rules": {
    // ===|
    // fix & config

    // enable prettier format rules to be check and marked as errors when violated https://github.com/prettier/eslint-plugin-prettier#installation
    "prettier/prettier": "error",

    // allow void in some cases for @typescript-eslint/no-floating-promises compatibility https://eslint.org/docs/rules/no-void -> https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-floating-promises.md#ignorevoid
    "no-void": [
      "error",
      {
        "allowAsStatement": true
      }
    ],

    // ===|
    // preference

    // https://basarat.gitbooks.io/typescript/docs/tips/defaultIsBad.html
    "import/prefer-default-export": "off",
    "import/no-default-export": "error",
    // Too restrictive, writing ugly code to defend against a very unlikely scenario: https://eslint.org/docs/rules/no-prototype-builtins
    "no-prototype-builtins": "off",
    // Use function hoisting to improve code readability
    "no-use-before-define": ["error", { "functions": false, "classes": true, "variables": true }],
    "@typescript-eslint/no-use-before-define": [
      "error",
      { "functions": false, "classes": true, "variables": true, "typedefs": true }
    ],
    // Common abbreviations are known and readable
    "unicorn/prevent-abbreviations": "off",
    // Airbnb prefers forEach
    "unicorn/no-array-for-each": "off",
    "unicorn/no-process-exit": "off",

    // ===
    // @typescript-eslint

    // ==
    // minor

    // T[] for simple arrays, Array<T> for unions, intersection, etc. https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/array-type.md
    "@typescript-eslint/array-type": [
      "error",
      {
        "default": "array-simple"
      }
    ],

    // allow ts disable comments with description only https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/ban-ts-comment.md
    "@typescript-eslint/ban-ts-comment": [
      "error",
      {
        "ts-ignore": "allow-with-description",
        "ts-nocheck": "allow-with-description",
        "ts-check": "allow-with-description",
        "ts-expect-error": "allow-with-description",
        "minimumDescriptionLength": 10
      }
    ],

    // maybe remove | type casting only with "as" keyword https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/consistent-type-assertions.md
    "@typescript-eslint/consistent-type-assertions": [
      "error",
      {
        "assertionStyle": "as",
        "objectLiteralTypeAssertions": "allow"
      }
    ],

    // delimiter in types/interfaces https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/member-delimiter-style.md
    "@typescript-eslint/member-delimiter-style": [
      "error",
      {
        "multiline": {
          "delimiter": "semi",
          "requireLast": true
        },
        "singleline": {
          "delimiter": "semi",
          "requireLast": true
        },
        "multilineDetection": "brackets"
      }
    ],

    // prop: () => {} for functions in objects https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/method-signature-style.md
    "@typescript-eslint/method-signature-style": ["error", "property"],

    // forbid returning function call if it returns nothing https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-confusing-void-expression.md
    "@typescript-eslint/no-confusing-void-expression": [
      "error",
      {
        "ignoreArrowShorthand": false,
        "ignoreVoidOperator": false
      }
    ],

    // just the style of using delete keyword (who even uses that...) with computed props https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-dynamic-delete.md
    "@typescript-eslint/no-dynamic-delete": ["error"],

    // ==
    // major

    // naming rules for everything https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/naming-convention.md
    "@typescript-eslint/naming-convention": [
      "error",

      /**
       * lead-trail undercores forbidden (if member is private, it should be
       * written in the way user can't acces it, not just marked like "don't call please")
       * general style is camelCase
       */
      {
        "selector": "default",
        "format": ["camelCase"],
        "leadingUnderscore": "forbid",
        "trailingUnderscore": "forbid"
      },

      // but for destructured params - do not apply style (you may want to save original look)
      {
        "selector": "variable",
        "modifiers": ["destructured"],
        "format": null
      },

      // for class use PacalCase
      {
        "selector": "class",
        "format": ["PascalCase"]
      },

      // for variables that are both const AND exported - style is UPPER_CASE
      {
        "selector": "variable",
        "format": ["UPPER_CASE"],
        "modifiers": ["const", "exported"]
      },

      // but for variables that are just const style is default - camelCase
      {
        "selector": "variable",
        "format": ["camelCase"],
        "modifiers": ["const"]
      },

      // for variables, properties and parameters, that are boolean, add one of prefixes and make PascalCase
      {
        "selector": [
          "variable",
          "parameter",
          "classProperty",
          "objectLiteralProperty",
          "typeProperty",
          "parameterProperty"
        ],
        "format": ["PascalCase"],
        "types": ["boolean"],
        "prefix": ["is", "should", "has", "can", "did", "will"]
      },

      // for properties and variables that requires quotes - ignore style (http headers and similar)
      {
        "selector": [
          "classProperty",
          "objectLiteralProperty",
          "typeProperty",
          "classMethod",
          "objectLiteralMethod",
          "typeMethod",
          "accessor",
          "enumMember"
        ],
        "format": null,
        "modifiers": ["requiresQuotes"]
      },

      // for interfaces add I before name
      {
        "selector": "interface",
        "format": ["PascalCase"],
        "prefix": ["I"]
      },

      // for types add T before name
      {
        "selector": "typeAlias",
        "format": ["PascalCase"],
        "prefix": ["T"]
      },

      // for types' generic params make it start with T (or be just T), type TMyType<T/Tsmth> = Array<T/Tsmth>
      {
        "selector": "typeParameter",
        "format": ["PascalCase"],
        "prefix": ["T"]
      },

      // for enum - style is UPPER_CASE with prefix E
      {
        "selector": ["enum"],
        "format": ["UPPER_CASE"],
        "prefix": ["E"]
      },

      // for enum members - style is UPPER_CASE
      {
        "selector": ["enumMember"],
        "format": ["UPPER_CASE"]
      }
    ],

    // no explicit any https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-explicit-any.md
    "@typescript-eslint/no-explicit-any": ["warn"],

    // TS 3.8+ "export type {}" for type exporting https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/consistent-type-exports.md
    "@typescript-eslint/consistent-type-exports": ["error"],

    // TS 3.8+ "import type {}" for type importing, conflict with ide imports autocompletion (ctrl+space), but auto-fixes on save https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/consistent-type-imports.md
    "@typescript-eslint/consistent-type-imports": [
      "error",
      {
        "prefer": "type-imports",
        "disallowTypeAnnotations": true
      }
    ],

    // allow/disallow functions to rely on implicit type inference. Currently Allowed (off). ALWAYS (off) in override section to support js files https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/explicit-function-return-type.md
    "@typescript-eslint/explicit-function-return-type": [
      "off",
      {
        "allowExpressions": false,
        "allowTypedFunctionExpressions": true,
        "allowHigherOrderFunctions": true,
        "allowDirectConstAssertionInArrowFunctions": true,
        "allowConciseArrowFunctionExpressionsStartingWithVoid": false
      }
    ],

    // allow/disallow EXPORTED functions to rely on type inference. Currently Allowed (off). ALWAYS (off) https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/explicit-module-boundary-types.md
    "@typescript-eslint/explicit-module-boundary-types": [
      "off",
      {
        "allowArgumentsExplicitlyTypedAsAny": false,
        "allowDirectConstAssertionInArrowFunctions": true,
        "allowedNames": [],
        "allowHigherOrderFunctions": true,
        "allowTypedFunctionExpressions": true
      }
    ],

    // disallow .toString (or implicit call) in cases method not expicitly defined, example `${ {a: 1} }` NOT allowed https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-base-to-string.md
    "@typescript-eslint/no-base-to-string": ["error"],

    // propper promise format, with await/void, then+catch https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-floating-promises.md
    "@typescript-eslint/no-floating-promises": [
      "error",
      {
        "ignoreVoid": true,
        "ignoreIIFE": false
      }
    ],

    // explicitly add void before fn call when it returns value, but you don't assign it to variable or use in any way https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-meaningless-void-operator.md
    "@typescript-eslint/no-meaningless-void-operator": [
      "error",
      {
        "checkNever": false
      }
    ]
  },
  "overrides": [
    {
      // disable the rule for js files
      "files": ["*.js", "*.jsx"],
      "rules": {
        "@typescript-eslint/explicit-function-return-type": ["off"],
        "@typescript-eslint/explicit-module-boundary-types": ["off"]
      }
    }
  ]
}

/*
// optional configs

{
  "extends": [
    // base for js
    "airbnb-base",
    // for this to work you should use airbnb-base (for js)
    // now using eslint-import-resolver-typescript resolver instead, since ts setup
    "plugin:import/typescript",
  ],
  rules: {
    // fix & config
    // ---------------

    // don't need when "airbnb-typescript/base" used (*nots)

    // fix error (airbnb) about importing files with no extension (*nots)
    "import/extensions": [
      "error",
      "ignorePackages",
      {
        "js": "never",
        "jsx": "never",
        "ts": "never",
        "tsx": "never"
      }
    ],
    // fixes error (airbnb) about enums being defined before (*nots)
    "no-shadow": "off",
    "@typescript-eslint/no-shadow": ["error"],
    // fixes error (airbnb) about unused enums and types (*nots)
    "no-unused-vars": "off",
    "@typescript-eslint/no-unused-vars": [
      "warn",
      { "vars": "all", "args": "after-used", "ignoreRestSiblings": false }
    ],

    // preference
    // ---------------

    // Too restrictive: https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/destructuring-assignment.md
    // "react/destructuring-assignment": "off",
    // No jsx extension: https://github.com/facebook/create-react-app/issues/87#issuecomment-234627904
    // "react/jsx-filename-extension": "off",
  },
  "overrides": [
    {
      // if somehow js file used
      "files": ["*.js"],
      "rules": {
        // Allow `require()`
        "@typescript-eslint/no-var-requires": "off"
      }
    }
  ]
}
*/
